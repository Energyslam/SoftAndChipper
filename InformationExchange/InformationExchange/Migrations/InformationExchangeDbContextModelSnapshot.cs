// <auto-generated />
using System;
using InformationExchange;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InformationExchange.Migrations
{
    [DbContext(typeof(InformationExchangeDbContext))]
    partial class InformationExchangeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InformationExchange.Models.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocumentRequestId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentRequestId");

                    b.HasIndex("PatientId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("InformationExchange.Models.DocumentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("DocumentRequests", (string)null);
                });

            modelBuilder.Entity("InformationExchange.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("InformationExchange.Models.Document", b =>
                {
                    b.HasOne("InformationExchange.Models.DocumentRequest", "DocumentRequest")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentRequestId");

                    b.HasOne("InformationExchange.Models.Patient", null)
                        .WithMany("Documents")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentRequest");
                });

            modelBuilder.Entity("InformationExchange.Models.DocumentRequest", b =>
                {
                    b.HasOne("InformationExchange.Models.Patient", null)
                        .WithMany("DocumentRequests")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InformationExchange.Models.DocumentRequest", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("InformationExchange.Models.Patient", b =>
                {
                    b.Navigation("DocumentRequests");

                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
